---
# microshift-start tasks

- name: check if microshift has run
  ansible.builtin.shell: systemctl show -p ActiveEnterTimestampMonotonic microshift | awk -F"=" '{print $2}'
  register: microshift_active
  ignore_errors: true

- block:
  - name: find microshift cleanup script
    ansible.builtin.find:
      paths: /usr/bin
      patterns:
        - '.*microshift.*cleanup.*'
        - '.*cleanup.*microshift.*'
      use_regex: yes
    register: find_cleanup

  - name: set microshift_cleanup_bin variable
    set_fact:
      microshift_cleanup_bin: "{{ find_cleanup.files[0].path if find_cleanup.files }}"

  - name: cleanup microshift data
    become: yes
    ansible.builtin.shell: echo 1 | {{ microshift_cleanup_bin }} --all
  when:
    - cleanup_microshift | default('true') | bool
    - microshift_active.stdout | int != 0

- name: disable microshift service
  become: yes
  ansible.builtin.systemd:
    name: microshift
    state: stopped
    enabled: no

- name: check for vnstat
  ansible.builtin.command: rpm -q vnstat
  register: vnstat_check
  ignore_errors: true

- name: vnstat cleanup
  become: yes
  block:
  - name: stop & enable vnstat service
    ansible.builtin.systemd:
      name: vnstat
      state: stopped
      enabled: yes

  - name: delete vnstat db
    ansible.builtin.file:
      path: "{{ vnstat_db }}"
      state: absent
  when: vnstat_check.rc == 0

- name: create .kube home dir
  ansible.builtin.file:
    path: ~/.kube/
    state: directory

- name: reboot machine
  become: yes
  ansible.builtin.reboot:
    reboot_timeout: 600

- name: record post-install disk utilization
  vars:
    filename: disk1.txt
  include_tasks: roles/common/tasks/disk.yml
  loop: "{{ du_dirs }}"

- name: Pause for 60 seconds for steady state post reboot
  ansible.builtin.pause:
    seconds: 60

- name: pbench recording start
  become: yes
  block:
  - name: source pbench-agent & register-tool-set
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-register-tool-set
  
  - name: set new pidstat interval
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-register-tool --name=pidstat -- --interval={{ sample_interval }}

  - name: start pbench-user-benchmark recording
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-user-benchmark --config=microshift -- sleep {{ pbench_record_duration }}
    async: "{{ pbench_record_duration|int * 2 }}"
    poll: 0
    register: pbench_user_benchmark_result
  
  - name: Pause for 60 seconds to gather steady state for pbench tool recording
    ansible.builtin.pause:
      seconds: 60
  when: install_pbench | bool
  environment:
    PBENCH_TOOL_DATA_SINK: localhost:8081

- name: check for cadvisor
  ansible.builtin.command: which cadvisor
  register: cadvisor_check
  ignore_errors: true

- name: measure microshift service boot time
  include_tasks: roles/common/tasks/boot.yml
  vars:
    boot_output_filename: "boot0.txt"
    cleanup_microshift: false
    reboot: false

- name: create service account task(s)
  include_tasks: roles/create-service-account/tasks/main.yml

- name: finish pbench capture
  become: yes
  block:
  - name: check on pbench-user-benchmark status
    ansible.builtin.async_status:
      jid: "{{ pbench_user_benchmark_result.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 240
    delay: 15

  - name: source pbench-agent & move results
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-move-results
    ignore_errors: yes
  when: install_pbench | bool
  environment:
    PBENCH_USER: microshift

- name: record fully running disk utilization
  vars:
    filename: disk2.txt
  include_tasks: roles/common/tasks/disk.yml
  loop: "{{ du_dirs }}"

- name: vnstat collection tasks
  block:
    - name: wait for vnstat db to populate
      ansible.builtin.shell: vnstat | grep rx
      retries: 60
      delay: 10
      register: vnstat_db
      until: vnstat_db.rc == 0

    - name: get vnstat network usage
      ansible.builtin.command: vnstat
      register: vnstat

    - name: record network usage to file
      local_action:
        module: copy
        content: "{{ vnstat.stdout }}"
        dest: network.txt
  when: vnstat_check.rc == 0
